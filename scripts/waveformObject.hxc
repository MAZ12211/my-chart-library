import funkin.graphics.FunkinSprite;
import flixel.sound.FlxSound;
import funkin.vis.dsp.SpectralAnalyzer;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import flixel.FlxG;

// CREATED BY THETERBOBORNATOR/KAI FOR FUNKIN' PHYSICS

//this is kinda a reform of ABotViz lol?
//either way im geekin i cant believe htis works omfg

class WaveformObject extends ScriptedFlxSpriteGroup
{
  var analyzer:Null<SpectralAnalyzer> = null;
  public var snd:Null<FlxSound> = null;
  var col:Int = 0xFFFFFFFF;

  // default bar count
  static var BAR_COUNT:Int = 10;
  // default space between each bar
  var BAR_SPACING:Int = 32;
  // default width of an individual bar
  var BAR_WIDTH:Int = 9;
  // height multiplier
  var BAR_HEIGHTMULT:Int = 1;

  public function new(snd:FlxSound)
  {
    super();

    this.snd = snd;
  }
  // EDITORS NOTE:
  // I tried to contain all these creation vars in new(), but they werent being called properly
  // might be something to do with ScriptedFlxSpriteGroup ? it would only call up to 3 vars to start
  // this works fine anyways
  /**
   * [Properly creates the WaveForm object. Be sure to call initAnalyzer()]
   * @param barCount How many Bars should display on the waveform
   * @param barSpacing How much space should be between each bar (in pixels)
   * @param barWidth How wide each bar is (in pixels)
   * @param barHeightMult Multiplier for the height of the bar. Not an exact science dont expect perfect results
   * @param col Bar color
   */
  public function createWaveForm(barCount:Int, ?barSpacing:Int = 32, ?barWidth:Int = 9, ?barHeightMult:Int = 1, ?col:Int = 0xFFFFFFFF):Void
  {
    this.col = col;

    BAR_COUNT = barCount;
    BAR_SPACING = barSpacing;
    BAR_WIDTH = barWidth;
    BAR_HEIGHTMULT = barHeightMult;

    for (index in 0...BAR_COUNT)
    {
      var viz:FunkinSprite = new FunkinSprite(index * (BAR_SPACING + BAR_WIDTH));
			viz.makeSolidColor(BAR_WIDTH, 10 * BAR_HEIGHTMULT, col);
      viz.antialiasing = true;
      add(viz);
    }
  }

  public function initAnalyzer():Void
  {
    if (snd == null) return;

    @:privateAccess
    analyzer = new SpectralAnalyzer(snd._channel.__audioSource, BAR_COUNT, 0.1, 40);
    // A-Bot tuning...
    analyzer.minDb = -65;
    analyzer.maxDb = -25;
    analyzer.maxFreq = 22000;
    // we use a very low minFreq since some songs use low low subbass like a boss
    analyzer.minFreq = 10;

    #if sys
    // On native it uses FFT stuff that isn't as optimized as the direct browser stuff we use on HTML5
    // So we want to manually change it!
    analyzer.fftN = 256;
    #end

    // analyzer.maxDb = -35;
    // analyzer.fftN = 2048;
  }

  public function dumpSound():Void
  {
    snd = null;
    analyzer = null;
  }

  var visTimer:Float = -1;
  var visTimeMax:Float = 1 / 30;

  static inline function min(x:Int, y:Int):Int
  {
    return x > y ? y : x;
  }

  override function draw()
  {
    super.draw();

    var levels = (analyzer != null) ? analyzer.getLevels() : getDefaultLevels();

    for (i in 0...(min(group.members.length, levels.length)))
    {
      var animFrame:Int = (FlxG.sound.volume == 0 || FlxG.sound.muted) ? 0 : Math.round(levels[i].value * 10 * BAR_HEIGHTMULT);

      // don't display if we're at 0 volume from the level
      group.members[i].visible = animFrame > 0;

      animFrame = Math.floor(Math.min(10 * BAR_HEIGHTMULT, animFrame));
      animFrame = Math.floor(Math.max(0, animFrame));

      group.members[i].scale.y = animFrame * 10;
      group.members[i].y = this.y;
    }
  }

  /**
   * TJW funkin.vis based visualizer! updateFFT() is the old nasty shit that dont worky!
   
  public function drawFFT():Void
  {
  }*/

  /**
   * Explicitly define the default levels to draw when the analyzer is not available.
   * @return Array<Bar>
   */
  static function getDefaultLevels():Array<Bar>
  {
    var result:Array<Bar> = [];

    for (i in 0...BAR_COUNT)
    {
      result.push({value: 0, peak: 0.0});
    }

    return result;
  }
}